# .github/workflows/ci-cd.yml
name: InvestMateAI CI/CD

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  # 🧪 Testing Job
  test:
    name: Tests & Security
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_realestate
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 🐍 Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.10'
        cache: 'pip'

    - name: 📦 Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: 🧪 Run tests
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_realestate
        SECRET_KEY: test_secret_key_for_ci
        OPENAI_API_KEY: sk-test-key-for-ci-environment-only
        AWS_S3_BUCKET_NAME: test-bucket
        AWS_ACCESS_KEY_ID: test
        AWS_SECRET_ACCESS_KEY: test
        PYTHONPATH: /home/runner/work/InvestMateAI/InvestMateAI
      run: |
        # Add current directory to Python path
        export PYTHONPATH="${PYTHONPATH}:$(pwd)"

        # Create database tables directly from models (skip migrations for CI)
        python -c "
        import sys
        sys.path.append('.')
        from app.database import Base, engine
        Base.metadata.create_all(bind=engine)
        print('✅ Database tables created successfully')
        "

        # Run tests with proper Python path
        PYTHONPATH=. pytest app/tests/ -v --tb=short

    - name: 🔍 Security check
      run: |
        pip install safety bandit
        safety check -r requirements.txt --ignore 70612 || echo "⚠️ Safety check completed with warnings"
        bandit -r app/ -ll || echo "⚠️ Bandit scan completed"

    - name: 🧹 Code style check
      run: |
        pip install flake8
        flake8 app/ --count --select=E9,F63,F7,F82 --show-source --statistics || echo "⚠️ Style check completed"

  # 🏗️ Build Docker image
  build:
    name: Build Docker
    runs-on: ubuntu-latest
    needs: test
    if: ${{ github.event_name == 'push' }}

    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 🐳 Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: 🏗️ Build Docker image
      run: |
        docker build -t investmate-ai:latest .
        echo "✅ Docker build completed successfully"

  # 🚀 Deploy to Railway (only on main branch)
  deploy:
    name: Deploy to Railway
    runs-on: ubuntu-latest
    needs: [test, build]
    if: ${{ github.ref == 'refs/heads/main' && github.event_name == 'push' }}
    environment: production

    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 🚄 Install Railway CLI
      run: |
        curl -fsSL https://railway.app/install.sh | sh
        echo "$HOME/.railway/bin" >> $GITHUB_PATH

    - name: 🚀 Deploy to Railway
      env:
        RAILWAY_TOKEN: ${{ secrets.RAILWAY_TOKEN }}
      run: |
        echo "🚀 Starting deployment to Railway..."
        railway login
        railway up --detach
        echo "✅ Deployment initiated successfully"

    - name: 🔄 Run database migrations
      env:
        RAILWAY_TOKEN: ${{ secrets.RAILWAY_TOKEN }}
      run: |
        echo "🔄 Running database migrations..."
        railway run alembic upgrade head
        echo "✅ Migrations completed"

    - name: 🏥 Health check
      env:
        RAILWAY_URL: ${{ secrets.RAILWAY_URL }}
      run: |
        echo "⏳ Waiting for deployment to be ready..."
        sleep 90

        echo "🏥 Performing health check..."
        max_attempts=5
        attempt=1

        while [ $attempt -le $max_attempts ]; do
          echo "Attempt $attempt/$max_attempts..."
          response=$(curl -s -o /dev/null -w "%{http_code}" $RAILWAY_URL/docs || echo "000")

          if [ "$response" = "200" ]; then
            echo "✅ Health check passed! App is live at: $RAILWAY_URL"
            exit 0
          else
            echo "⚠️ Health check failed with status: $response"
            if [ $attempt -eq $max_attempts ]; then
              echo "❌ Health check failed after $max_attempts attempts"
              exit 1
            fi
            echo "⏳ Waiting 30s before retry..."
            sleep 30
            attempt=$((attempt + 1))
          fi
        done

    - name: 🎉 Deployment complete
      run: |
        echo "🎉 Deployment completed successfully!"
        echo "🌐 Your app is live at: ${{ secrets.RAILWAY_URL }}"
        echo "📚 API docs available at: ${{ secrets.RAILWAY_URL }}/docs"